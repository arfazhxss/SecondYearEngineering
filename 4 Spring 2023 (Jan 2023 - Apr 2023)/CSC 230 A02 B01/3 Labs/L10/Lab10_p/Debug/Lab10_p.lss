
Lab10_p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  0000038c  00000400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014e7  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000eaa  00000000  00000000  000019d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006c0  00000000  00000000  00002881  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00002f44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000676  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000569  00000000  00000000  00003696  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00003bff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e8       	ldi	r30, 0x8C	; 140
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 31       	cpi	r26, 0x10	; 16
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	c9 d0       	rcall	.+402    	; 0x2a2 <main>
 110:	3b c1       	rjmp	.+630    	; 0x388 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <lcd_nibble>:
 114:	e2 e0       	ldi	r30, 0x02	; 2
 116:	f1 e0       	ldi	r31, 0x01	; 1
 118:	90 81       	ld	r25, Z
 11a:	9f 7e       	andi	r25, 0xEF	; 239
 11c:	90 83       	st	Z, r25
 11e:	88 23       	and	r24, r24
 120:	1c f4       	brge	.+6      	; 0x128 <lcd_nibble+0x14>
 122:	90 81       	ld	r25, Z
 124:	90 61       	ori	r25, 0x10	; 16
 126:	90 83       	st	Z, r25
 128:	e2 e0       	ldi	r30, 0x02	; 2
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	90 81       	ld	r25, Z
 12e:	97 7f       	andi	r25, 0xF7	; 247
 130:	90 83       	st	Z, r25
 132:	86 ff       	sbrs	r24, 6
 134:	03 c0       	rjmp	.+6      	; 0x13c <lcd_nibble+0x28>
 136:	90 81       	ld	r25, Z
 138:	98 60       	ori	r25, 0x08	; 8
 13a:	90 83       	st	Z, r25
 13c:	9e b1       	in	r25, 0x0e	; 14
 13e:	97 7f       	andi	r25, 0xF7	; 247
 140:	9e b9       	out	0x0e, r25	; 14
 142:	85 ff       	sbrs	r24, 5
 144:	03 c0       	rjmp	.+6      	; 0x14c <lcd_nibble+0x38>
 146:	9e b1       	in	r25, 0x0e	; 14
 148:	98 60       	ori	r25, 0x08	; 8
 14a:	9e b9       	out	0x0e, r25	; 14
 14c:	94 b3       	in	r25, 0x14	; 20
 14e:	9f 7d       	andi	r25, 0xDF	; 223
 150:	94 bb       	out	0x14, r25	; 20
 152:	84 ff       	sbrs	r24, 4
 154:	03 c0       	rjmp	.+6      	; 0x15c <lcd_nibble+0x48>
 156:	84 b3       	in	r24, 0x14	; 20
 158:	80 62       	ori	r24, 0x20	; 32
 15a:	84 bb       	out	0x14, r24	; 20
 15c:	e2 e0       	ldi	r30, 0x02	; 2
 15e:	f1 e0       	ldi	r31, 0x01	; 1
 160:	80 81       	ld	r24, Z
 162:	80 64       	ori	r24, 0x40	; 64
 164:	80 83       	st	Z, r24
 166:	85 e0       	ldi	r24, 0x05	; 5
 168:	8a 95       	dec	r24
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcd_nibble+0x54>
 16c:	00 00       	nop
 16e:	80 81       	ld	r24, Z
 170:	8f 7b       	andi	r24, 0xBF	; 191
 172:	80 83       	st	Z, r24
 174:	08 95       	ret

00000176 <lcd_byte>:
 176:	cf 93       	push	r28
 178:	c8 2f       	mov	r28, r24
 17a:	cc df       	rcall	.-104    	; 0x114 <lcd_nibble>
 17c:	8c 2f       	mov	r24, r28
 17e:	82 95       	swap	r24
 180:	80 7f       	andi	r24, 0xF0	; 240
 182:	c8 df       	rcall	.-112    	; 0x114 <lcd_nibble>
 184:	87 ec       	ldi	r24, 0xC7	; 199
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_byte+0x12>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_byte+0x18>
 18e:	00 00       	nop
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <lcd_command>:
 194:	cf 93       	push	r28
 196:	c8 2f       	mov	r28, r24
 198:	e2 e0       	ldi	r30, 0x02	; 2
 19a:	f1 e0       	ldi	r31, 0x01	; 1
 19c:	80 81       	ld	r24, Z
 19e:	8f 7d       	andi	r24, 0xDF	; 223
 1a0:	80 83       	st	Z, r24
 1a2:	8c 2f       	mov	r24, r28
 1a4:	e8 df       	rcall	.-48     	; 0x176 <lcd_byte>
 1a6:	c4 30       	cpi	r28, 0x04	; 4
 1a8:	18 f0       	brcs	.+6      	; 0x1b0 <lcd_command+0x1c>
 1aa:	c0 38       	cpi	r28, 0x80	; 128
 1ac:	50 f0       	brcs	.+20     	; 0x1c2 <lcd_command+0x2e>
 1ae:	07 c0       	rjmp	.+14     	; 0x1be <lcd_command+0x2a>
 1b0:	8f e3       	ldi	r24, 0x3F	; 63
 1b2:	9f e1       	ldi	r25, 0x1F	; 31
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <lcd_command+0x20>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <lcd_command+0x26>
 1ba:	00 00       	nop
 1bc:	c0 e8       	ldi	r28, 0x80	; 128
 1be:	c0 93 00 02 	sts	0x0200, r28	; 0x800200 <__DATA_REGION_ORIGIN__>
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <lcd_putchar>:
 1c6:	e2 e0       	ldi	r30, 0x02	; 2
 1c8:	f1 e0       	ldi	r31, 0x01	; 1
 1ca:	90 81       	ld	r25, Z
 1cc:	90 62       	ori	r25, 0x20	; 32
 1ce:	90 83       	st	Z, r25
 1d0:	d2 df       	rcall	.-92     	; 0x176 <lcd_byte>
 1d2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1d6:	8f 5f       	subi	r24, 0xFF	; 255
 1d8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 1dc:	80 39       	cpi	r24, 0x90	; 144
 1de:	19 f0       	breq	.+6      	; 0x1e6 <lcd_putchar+0x20>
 1e0:	80 3d       	cpi	r24, 0xD0	; 208
 1e2:	19 f0       	breq	.+6      	; 0x1ea <lcd_putchar+0x24>
 1e4:	08 95       	ret
 1e6:	80 ec       	ldi	r24, 0xC0	; 192
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <lcd_putchar+0x26>
 1ea:	80 e8       	ldi	r24, 0x80	; 128
 1ec:	d3 cf       	rjmp	.-90     	; 0x194 <lcd_command>
 1ee:	08 95       	ret

000001f0 <lcd_puts>:
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	ec 01       	movw	r28, r24
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <lcd_puts+0xc>
 1f8:	e6 df       	rcall	.-52     	; 0x1c6 <lcd_putchar>
 1fa:	21 96       	adiw	r28, 0x01	; 1
 1fc:	88 81       	ld	r24, Y
 1fe:	81 11       	cpse	r24, r1
 200:	fb cf       	rjmp	.-10     	; 0x1f8 <lcd_puts+0x8>
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <lcd_init>:
 208:	83 b3       	in	r24, 0x13	; 19
 20a:	80 62       	ori	r24, 0x20	; 32
 20c:	83 bb       	out	0x13, r24	; 19
 20e:	8d b1       	in	r24, 0x0d	; 13
 210:	88 60       	ori	r24, 0x08	; 8
 212:	8d b9       	out	0x0d, r24	; 13
 214:	e1 e0       	ldi	r30, 0x01	; 1
 216:	f1 e0       	ldi	r31, 0x01	; 1
 218:	80 81       	ld	r24, Z
 21a:	88 60       	ori	r24, 0x08	; 8
 21c:	80 83       	st	Z, r24
 21e:	80 81       	ld	r24, Z
 220:	80 61       	ori	r24, 0x10	; 16
 222:	80 83       	st	Z, r24
 224:	80 81       	ld	r24, Z
 226:	80 62       	ori	r24, 0x20	; 32
 228:	80 83       	st	Z, r24
 22a:	80 81       	ld	r24, Z
 22c:	80 64       	ori	r24, 0x40	; 64
 22e:	80 83       	st	Z, r24
 230:	e2 e0       	ldi	r30, 0x02	; 2
 232:	f1 e0       	ldi	r31, 0x01	; 1
 234:	80 81       	ld	r24, Z
 236:	8f 7b       	andi	r24, 0xBF	; 191
 238:	80 83       	st	Z, r24
 23a:	80 81       	ld	r24, Z
 23c:	8f 7d       	andi	r24, 0xDF	; 223
 23e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	8f e5       	ldi	r24, 0x5F	; 95
 242:	9a ee       	ldi	r25, 0xEA	; 234
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <lcd_init+0x3c>
 248:	00 c0       	rjmp	.+0      	; 0x24a <lcd_init+0x42>
 24a:	00 00       	nop
 24c:	80 e3       	ldi	r24, 0x30	; 48
 24e:	62 df       	rcall	.-316    	; 0x114 <lcd_nibble>
 250:	8f e0       	ldi	r24, 0x0F	; 15
 252:	90 e4       	ldi	r25, 0x40	; 64
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <lcd_init+0x4c>
 258:	00 c0       	rjmp	.+0      	; 0x25a <lcd_init+0x52>
 25a:	00 00       	nop
 25c:	80 e3       	ldi	r24, 0x30	; 48
 25e:	5a df       	rcall	.-332    	; 0x114 <lcd_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 260:	8f e8       	ldi	r24, 0x8F	; 143
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <lcd_init+0x5c>
 268:	00 c0       	rjmp	.+0      	; 0x26a <lcd_init+0x62>
 26a:	00 00       	nop
 26c:	80 e3       	ldi	r24, 0x30	; 48
 26e:	52 df       	rcall	.-348    	; 0x114 <lcd_nibble>
 270:	87 ec       	ldi	r24, 0xC7	; 199
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <lcd_init+0x6c>
 278:	00 c0       	rjmp	.+0      	; 0x27a <lcd_init+0x72>
 27a:	00 00       	nop
 27c:	80 e2       	ldi	r24, 0x20	; 32
 27e:	4a df       	rcall	.-364    	; 0x114 <lcd_nibble>
 280:	87 ec       	ldi	r24, 0xC7	; 199
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <lcd_init+0x7c>
 288:	00 c0       	rjmp	.+0      	; 0x28a <lcd_init+0x82>
 28a:	00 00       	nop
 28c:	88 e2       	ldi	r24, 0x28	; 40
 28e:	82 df       	rcall	.-252    	; 0x194 <lcd_command>
 290:	88 e0       	ldi	r24, 0x08	; 8
 292:	80 df       	rcall	.-256    	; 0x194 <lcd_command>
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	7e df       	rcall	.-260    	; 0x194 <lcd_command>
 298:	86 e0       	ldi	r24, 0x06	; 6
 29a:	7c df       	rcall	.-264    	; 0x194 <lcd_command>
 29c:	8c e0       	ldi	r24, 0x0C	; 12
 29e:	7a cf       	rjmp	.-268    	; 0x194 <lcd_command>
 2a0:	08 95       	ret

000002a2 <main>:
#include <string.h>
#include <stdlib.h>


int main(void)
{
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
 2aa:	6d 97       	sbiw	r28, 0x1d	; 29
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	f8 94       	cli
 2b0:	de bf       	out	0x3e, r29	; 62
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	cd bf       	out	0x3d, r28	; 61
	lcd_init();
 2b6:	a8 df       	rcall	.-176    	; 0x208 <lcd_init>
	while (1) {
		char line1[15]="OneTwoThreFour";
 2b8:	8f e0       	ldi	r24, 0x0F	; 15
 2ba:	e1 e0       	ldi	r30, 0x01	; 1
 2bc:	f2 e0       	ldi	r31, 0x02	; 2
 2be:	8e 01       	movw	r16, r28
 2c0:	0f 5f       	subi	r16, 0xFF	; 255
 2c2:	1f 4f       	sbci	r17, 0xFF	; 255
 2c4:	d8 01       	movw	r26, r16
 2c6:	01 90       	ld	r0, Z+
 2c8:	0d 92       	st	X+, r0
 2ca:	8a 95       	dec	r24
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <main+0x24>
		int size = strlen(line1);
 2ce:	f8 01       	movw	r30, r16
 2d0:	01 90       	ld	r0, Z+
 2d2:	00 20       	and	r0, r0
 2d4:	e9 f7       	brne	.-6      	; 0x2d0 <main+0x2e>
 2d6:	cf 01       	movw	r24, r30
 2d8:	01 97       	sbiw	r24, 0x01	; 1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2da:	4a e0       	ldi	r20, 0x0A	; 10
 2dc:	be 01       	movw	r22, r28
 2de:	60 5f       	subi	r22, 0xF0	; 240
 2e0:	7f 4f       	sbci	r23, 0xFF	; 255
 2e2:	80 1b       	sub	r24, r16
 2e4:	91 0b       	sbc	r25, r17
 2e6:	1d d0       	rcall	.+58     	; 0x322 <__itoa_ncheck>
void lcd_command( uint8_t d );

// An inline function to set the x and y position
// in a 2-line LCD display
static inline void lcd_xy(uint8_t x, uint8_t y){
	lcd_command(x + ((y==1) ? LCD_LINE2 : LCD_LINE1 ));
 2e8:	81 e8       	ldi	r24, 0x81	; 129
 2ea:	54 df       	rcall	.-344    	; 0x194 <lcd_command>
		char line2[14];
		itoa(size,line2,10);
		lcd_xy(1,0);
		lcd_puts(line1);
 2ec:	c8 01       	movw	r24, r16
 2ee:	80 df       	rcall	.-256    	; 0x1f0 <lcd_puts>
 2f0:	81 ec       	ldi	r24, 0xC1	; 193
 2f2:	50 df       	rcall	.-352    	; 0x194 <lcd_command>
		lcd_xy(1,1);
		lcd_puts(line2);
 2f4:	ce 01       	movw	r24, r28
 2f6:	40 96       	adiw	r24, 0x10	; 16
 2f8:	7b df       	rcall	.-266    	; 0x1f0 <lcd_puts>
 2fa:	ff ef       	ldi	r31, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fc:	23 ed       	ldi	r18, 0xD3	; 211
 2fe:	80 e3       	ldi	r24, 0x30	; 48
 300:	f1 50       	subi	r31, 0x01	; 1
 302:	20 40       	sbci	r18, 0x00	; 0
 304:	80 40       	sbci	r24, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <main+0x5e>
 308:	00 c0       	rjmp	.+0      	; 0x30a <main+0x68>
 30a:	00 00       	nop
		//char line[15] = "";
		//lcd_xy(1,0);
		//lcd_puts(line);
		//lcd_xy(1,1);
		//lcd_puts(line);
		lcd_init();
 30c:	7d df       	rcall	.-262    	; 0x208 <lcd_init>
 30e:	9f ef       	ldi	r25, 0xFF	; 255
 310:	e3 ed       	ldi	r30, 0xD3	; 211
 312:	f0 e3       	ldi	r31, 0x30	; 48
 314:	91 50       	subi	r25, 0x01	; 1
 316:	e0 40       	sbci	r30, 0x00	; 0
 318:	f0 40       	sbci	r31, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <main+0x72>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <main+0x7c>
 31e:	00 00       	nop
 320:	cb cf       	rjmp	.-106    	; 0x2b8 <main+0x16>

00000322 <__itoa_ncheck>:
 322:	bb 27       	eor	r27, r27
 324:	4a 30       	cpi	r20, 0x0A	; 10
 326:	31 f4       	brne	.+12     	; 0x334 <__itoa_ncheck+0x12>
 328:	99 23       	and	r25, r25
 32a:	22 f4       	brpl	.+8      	; 0x334 <__itoa_ncheck+0x12>
 32c:	bd e2       	ldi	r27, 0x2D	; 45
 32e:	90 95       	com	r25
 330:	81 95       	neg	r24
 332:	9f 4f       	sbci	r25, 0xFF	; 255
 334:	01 c0       	rjmp	.+2      	; 0x338 <__utoa_common>

00000336 <__utoa_ncheck>:
 336:	bb 27       	eor	r27, r27

00000338 <__utoa_common>:
 338:	fb 01       	movw	r30, r22
 33a:	55 27       	eor	r21, r21
 33c:	aa 27       	eor	r26, r26
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	aa 1f       	adc	r26, r26
 344:	a4 17       	cp	r26, r20
 346:	10 f0       	brcs	.+4      	; 0x34c <__utoa_common+0x14>
 348:	a4 1b       	sub	r26, r20
 34a:	83 95       	inc	r24
 34c:	50 51       	subi	r21, 0x10	; 16
 34e:	b9 f7       	brne	.-18     	; 0x33e <__utoa_common+0x6>
 350:	a0 5d       	subi	r26, 0xD0	; 208
 352:	aa 33       	cpi	r26, 0x3A	; 58
 354:	08 f0       	brcs	.+2      	; 0x358 <__utoa_common+0x20>
 356:	a9 5d       	subi	r26, 0xD9	; 217
 358:	a1 93       	st	Z+, r26
 35a:	00 97       	sbiw	r24, 0x00	; 0
 35c:	79 f7       	brne	.-34     	; 0x33c <__utoa_common+0x4>
 35e:	b1 11       	cpse	r27, r1
 360:	b1 93       	st	Z+, r27
 362:	11 92       	st	Z+, r1
 364:	cb 01       	movw	r24, r22
 366:	00 c0       	rjmp	.+0      	; 0x368 <strrev>

00000368 <strrev>:
 368:	dc 01       	movw	r26, r24
 36a:	fc 01       	movw	r30, r24
 36c:	67 2f       	mov	r22, r23
 36e:	71 91       	ld	r23, Z+
 370:	77 23       	and	r23, r23
 372:	e1 f7       	brne	.-8      	; 0x36c <strrev+0x4>
 374:	32 97       	sbiw	r30, 0x02	; 2
 376:	04 c0       	rjmp	.+8      	; 0x380 <strrev+0x18>
 378:	7c 91       	ld	r23, X
 37a:	6d 93       	st	X+, r22
 37c:	70 83       	st	Z, r23
 37e:	62 91       	ld	r22, -Z
 380:	ae 17       	cp	r26, r30
 382:	bf 07       	cpc	r27, r31
 384:	c8 f3       	brcs	.-14     	; 0x378 <strrev+0x10>
 386:	08 95       	ret

00000388 <_exit>:
 388:	f8 94       	cli

0000038a <__stop_program>:
 38a:	ff cf       	rjmp	.-2      	; 0x38a <__stop_program>
